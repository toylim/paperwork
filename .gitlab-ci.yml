# image: $CI_REGISTRY_IMAGE/build:latest
image: registry.gitlab.gnome.org/world/openpaperwork/paperwork/build:latest

variables:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: none

stages:
  # no point in waiting for the tests to end before generating the data files
  # or the development documentation
  - build_img
  - tests
  - data
  - deploy

build_img:
  stage: build_img
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  tags:
    - docker
  script:
    # make sure to fetch the latest Debian image
    - docker system prune -f
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/build:latest ci
    - docker push $CI_REGISTRY_IMAGE/build:latest

check:
  stage: tests
  script:
    - make check


test:
  stage: tests
  script:
    - source ./activate_test_env.sh && pip3 install -U setuptools
    - source ./activate_test_env.sh && make install
    - source ./activate_test_env.sh && paperwork-gtk chkdeps -y
    - source ./activate_test_env.sh && paperwork-cli chkdeps -y
    - source ./activate_test_env.sh && make test


test_chkdeps:
  image: debian:testing
  stage: tests
  script:
    - apt-get update
    # bare minimum to install Paperwork from sources
    - apt-get install -y
        build-essential
        gettext
        make
        python3
        python3-dev
        python3-pip
        python3-virtualenv
        wget
    - virtualenv -p python3 /venv
    - source /venv/bin/activate && pip3 install -U setuptools
    - source /venv/bin/activate && make install
    - source /venv/bin/activate && paperwork-json chkdeps


generate_data:
  stage: data
  script:
    - source ./activate_test_env.sh && pip3 install -U setuptools
    - source ./activate_test_env.sh && make install
    - source ./activate_test_env.sh && xvfb-run paperwork-gtk chkdeps -y
    - source ./activate_test_env.sh && xvfb-run paperwork-cli chkdeps -y
    - source ./activate_test_env.sh && make data upload_data


doc_devel:
  stage: data
  script:
    - source ./activate_test_env.sh && pip3 install -U setuptools
    - source ./activate_test_env.sh && make doc
    - source ./activate_test_env.sh && make upload_doc


linux_flatpak:
  stage: deploy
  timeout: 48h
  only:
    - branches@World/OpenPaperwork/paperwork
    - tags@World/OpenPaperwork/paperwork
  tags:
    - openpaper-flatpak
  script:
    # workaround error 'fatal: transport 'file' not allowed'
    - git config --global --add protocol.file.allow always
    # Running in from a gitlab-runner directly in a shell, as the user
    # 'gitlab-runner'
    # --> not running as root, so we cannot actually install anything
    # - apt-get update
    # - apt-get install -y -q rsync flatpak-builder make
    - ./ci/update_flatpak_repo.sh

linux_appimage:
  stage: deploy
  timeout: 2h
  script:
    - virtualenv -p python3 /venv
    - source /venv/bin/activate && pip3 install -U setuptools
    - source /venv/bin/activate && pip3 install appimage-builder
    # Build
    - source /venv/bin/activate && make linux_exe
    - ./ci/deliver.sh paperwork-gtk/Paperwork-gtk-latest-x86_64.AppImage linux .appimage paperwork-gtk
    - ./ci/deliver.sh paperwork-shell/Paperwork-cli-latest-x86_64.AppImage linux .appimage paperwork-cli
    - ./ci/deliver.sh paperwork-shell/Paperwork-json-latest-x86_64.AppImage linux .appimage paperwork-json
  artifacts:
    expire_in: 2 days
    paths:
      - paperwork-gtk/Paperwork-gtk-latest-x86_64.AppImage
      - paperwork-shell/Paperwork-cli-latest-x86_64.AppImage
      - paperwork-shell/Paperwork-json-latest-x86_64.AppImage


.windows: &windows
  variables:
    MSYSTEM: "MINGW64"
    CHERE_INVOKING: "yes"
  before_script:
    # Libinsane build dependencies
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S make
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-cunit
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-doxygen
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-gcc
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-gobject-introspection
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-meson
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python3-gobject
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-vala
    # Paperwork build dependencies
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S git  # for 'make version'
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-ca-certificates
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-cairo
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-gdk-pixbuf2
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-gettext
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-gtk3
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-libhandy
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-libnotify
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-nsis
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-nsis-nsisunz
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-poppler
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python-psutil
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python-scikit-learn
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python3-cairo
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python3-cx_Freeze
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python3-pillow
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python3-pip
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-python3-setuptools
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S wget  # for downloading data files
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S zip unzip
    # Workaround for pycountry and Cx_freeze
    # See https://github.com/marcelotduarte/cx_Freeze/issues/930
    - c:\msys64\usr\bin\bash -lc "pip3 uninstall -y pycountry"
    - c:\msys64\usr\bin\bash -lc "pip3 install --no-cache --use-pep517 pycountry==20.7.3"
    - git submodule init
    - git submodule update --recursive --remote
    - c:\msys64\usr\bin\bash -lc "make clean"
    - c:\msys64\usr\bin\bash -lc "make uninstall"
    - c:\msys64\usr\bin\bash -lc "make -C sub/libinsane uninstall || true"
    - c:\msys64\usr\bin\bash -lc "make -C sub/libpillowfight uninstall || true"
    - c:\msys64\usr\bin\bash -lc "make -C sub/pyocr uninstall || true"
    # a 2nd time just to be really sure
    # (that's the problem when can't use containers ..)
    - c:\msys64\usr\bin\bash -lc "make uninstall"
    - c:\msys64\usr\bin\bash -lc "make -C sub/libinsane uninstall || true"
    - c:\msys64\usr\bin\bash -lc "make -C sub/libpillowfight uninstall || true"
    - c:\msys64\usr\bin\bash -lc "make -C sub/pyocr uninstall || true"


windows_tests:
  stage: tests
  only:
    - branches@World/OpenPaperwork/paperwork
    - tags@World/OpenPaperwork/paperwork
  tags:
    - windows
    - msys2
  <<: *windows
  script:
    # Tesseract (required for unit tests)
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-libarchive  # missing tesseract dependency
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-tesseract-ocr
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-tesseract-data-eng
    - c:\msys64\usr\bin\pacman --needed --noconfirm -S mingw-w64-x86_64-tesseract-data-fra
    # Build
    - c:\msys64\usr\bin\bash -lc "export TESSDATA_PREFIX=/mingw64/share/tessdata && make install test"
    - c:\msys64\usr\bin\bash -lc "make uninstall"


windows_exe:
  stage: deploy
  only:
    - branches@World/OpenPaperwork/paperwork
    - tags@World/OpenPaperwork/paperwork
  tags:
    - windows
    - msys2
  <<: *windows
  script:
    # We need rclone to upload the files on OVH object storage
    - c:\msys64\usr\bin\rm -f rclone-v1.53.3-windows-386.zip
    - c:\msys64\usr\bin\rm -rf rclone-v1.53.3-windows-386
    - c:\msys64\usr\bin\wget -q https://github.com/rclone/rclone/releases/download/v1.53.3/rclone-v1.53.3-windows-386.zip
    - c:\msys64\usr\bin\unzip rclone-v1.53.3-windows-386.zip
    - c:\msys64\usr\bin\cp rclone-v1.53.3-windows-386/rclone.exe /usr/bin
    # Build
    - c:\msys64\usr\bin\bash -lc "make windows_exe"
    - c:\msys64\usr\bin\bash -lc "./ci/deliver.sh dist/paperwork.zip windows .zip"
    - c:\msys64\usr\bin\bash -lc "make uninstall"
